#include <iostream>
#include <vector>
#include <memory>
#include <mpi.h>

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; ++j) {
        if (arr[j] <= pivot) {
            i++;
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quicksort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

int main(int argc, char** argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int arr[] = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    int chunk_size = arr_size / size;
    int remainder = arr_size % size; // Handle remainder

    std::vector<int> local_arr(chunk_size + (rank < remainder ? 1 : 0)); // Use std::vector for memory management

    // Scatter the array
    MPI_Scatter(arr, chunk_size, MPI_INT, local_arr.data(), chunk_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Perform local quicksort
    quicksort(local_arr.data(), 0, local_arr.size() - 1);

    // Gather the sorted subarrays
    MPI_Gather(local_arr.data(), chunk_size, MPI_INT, arr, chunk_size, MPI_INT, 0, MPI_COMM_WORLD);

    MPI_Finalize();

    // Output the sorted array
    if (rank == 0) {
        std::cout << "Sorted array:";
        for (int i = 0; i < arr_size; ++i) {
            std::cout << " " << arr[i];
        }
        std::cout << std::endl;
    }

    return 0;
}
